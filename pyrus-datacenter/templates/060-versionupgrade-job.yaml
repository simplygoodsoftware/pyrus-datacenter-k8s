---
apiVersion: batch/v1
kind: Job
metadata:
  name: &name upgrade-version-{{ .Values.tagsContainers.All }}
  labels: &selector
    app: *name
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    meta.helm.sh/release-name: {{ .Release.Name | quote }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace | quote }}
{{- if gt .Release.Revision 1 }}
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-weight: "1"
{{- end }}
spec:
  activeDeadlineSeconds: 1200
  template:
    metadata:
      labels: *selector
    spec:
      restartPolicy: OnFailure
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: docker-pyrus-cred
{{- end }}
      initContainers:
        - name: depends-on
          image: {{ .Values.containersRepo.default }}/k8s-waits
          imagePullPolicy: {{ .Values.pullPolicy | default "IfNotPresent" }}
          command:
            - wait_endpoints
{{- if not .Values.database.external }}
            - {{ .Release.Namespace }}/endpoints/pyrus-postgresql
{{- end }}
            - {{ .Release.Namespace }}/endpoints/pyrus-elastic
            - {{ .Release.Namespace }}/endpoints/pyrus-logs-pgsql
        - name: wait-setup-variable-complite
          image: {{ .Values.containersRepo.default }}/k8s-waits
          imagePullPolicy: {{ .Values.pullPolicy | default "IfNotPresent" }}
          command:
            - sh
            - -c
            - kubectl wait --for=condition=complete job.batch/set-pyrus-setupparam --timeout=600s
{{- range $.Values.versionUpgradeHistoryBefore1121 }}
{{- $upversion := . }}
        - name: up-to-{{ $upversion | replace "." "-" }}
          image: {{ $.Values.containersRepo.default }}/pyrus-setup:{{ $upversion }}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: common-variables
          command:
            - sh
            - -c
            - |
              export VERSION_IS=$(dotnet Pyrus.DataMigrations.dll --version \
                | sed -nr '/version is [0-9.]+/{s/.*version is ([0-9.]*)$/\1/;p}')
              
              printf "Current version: ${VERSION_IS}"
              
              printf "{{ $upversion }}\n${VERSION_IS}\n" \
                | sort -V | head -n 1 | grep -q "{{ $upversion }}" && echo " skip" && exit 0
              
              echo "Upping it."

              dotnet Pyrus.DataMigrations.dll --update
{{- end }}
{{- range $.Values.versionUpgradeHistory1121 }}
{{- $upversion := . }}
        - name: up-to-{{ $upversion | replace "." "-" }}
          image: {{ $.Values.containersRepo.default }}/pyrus-setup:{{ $upversion }}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: common-variables
          command:
            - sh
            - -c
            - |
              export VERSION_IS=$(dotnet Pyrus.DataMigrations.dll --version \
                | sed -nr '/version is [0-9.]+/{s/.*version is ([0-9.]*)$/\1/;p}')
              
              printf "Current version: ${VERSION_IS}"
              
              printf "{{ $upversion }}\n${VERSION_IS}\n" \
                | sort -V | head -n 1 | grep -q "{{ $upversion }}" && echo " skip" && exit 0
              
              echo " upping it..."

              yes | dotnet Pyrus.DataMigrations.dll --update
{{- end }}

      containers:
        - name: check-relise-version-is-equal-bd-or-update
          image: {{ .Values.containersRepo.default }}/pyrus-setup:{{ .Values.tagsContainers.All }}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: common-variables
          command:
            - sh
            - -c
            - |
              export VERSION_IS=$(dotnet Pyrus.DataMigrations.dll --version | sed -nr '/version is [0-9.]+/{s/.*version is ([0-9.]*)$/\1/;p}')
              printf "Current version: ${VERSION_IS}"
              printf "\nContainer version: {{ .Values.tagsContainers.All }}\n"
              
              if [ "${VERSION_IS}" != "{{ .Values.tagsContainers.All }}" ];then
                  echo "Update containers is fall"
                  exit 1
              fi
              
              echo "Version is equal"
              
