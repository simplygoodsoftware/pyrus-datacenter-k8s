{{- $nats := lookup "apps/v1" "StatefulSet" .Release.Namespace (include "nats.fullname" .Subcharts.nats) }}
{{- $mainDB := lookup "apps/v1" "StatefulSet" .Release.Namespace "pyrus-postgresql" }}
{{- $logsDB := lookup "apps/v1" "StatefulSet" .Release.Namespace "pyrus-logs-pgsql" }}
{{- if or $nats $logsDB }}
{{-   $natsVersion := index (split "-" (index $nats.metadata.labels "helm.sh/chart")) "_1" }}
{{-   $needNatsUpgrade := semverCompare "<0.18.2" $natsVersion }}
{{-   $needPostgresUpgrade := false }}
{{- if $logsDB }}
{{-     $needPostgresUpgrade = ne (len $logsDB.spec.volumeClaimTemplates) 2 }}
{{- end }}
{{-   if (semverCompare ">=1.12.0" $.Values.tagsContainers.All) }}
{{-     if or $needNatsUpgrade $needPostgresUpgrade }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pre-upgrade-preparation
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-weight: "-1"
rules:
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - list
      - get
  - apiGroups: ["apps"]
    resources:
      - deployments
      - deployments/scale
      - deployments/status
    verbs:
      - get
      - patch
  - apiGroups: ["apps"]
    resourceNames:
{{-       if or $needNatsUpgrade }}
      - {{ include "nats.fullname" .Subcharts.nats }}
{{-       end }}
{{-       if or $needPostgresUpgrade }}
      - "pyrus-postgresql"
      - "pyrus-logs-pgsql"
{{-       end }}
    resources:
      - statefulsets
    verbs:
      - delete
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pre-upgrade-preparation
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-weight: "-1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pre-upgrade-preparation
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-weight: "-1"
subjects:
  - kind: ServiceAccount
    name: pre-upgrade-preparation
roleRef:
  kind: Role
  name: pre-upgrade-preparation
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: &name pre-upgrade-preparation
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-weight: "-1"
  labels: &selector
    app: *name
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    meta.helm.sh/release-name: {{ .Release.Name | quote }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace | quote }}
spec:
  activeDeadlineSeconds: 1200
  template:
    metadata:
      labels: *selector
    spec:
      restartPolicy: Never
      serviceAccountName: pre-upgrade-preparation
      containers:
        - name: pre-upgrade-preparation
          image: bitnami/kubectl:1.28.6
          command:
            - /bin/sh
            - -c
            - |
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-async-worker 
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-bind-service
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-file-service
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-mail-reader
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-mail-sender
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-notification-service
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-preview-generator
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-schedule-to-today
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-web-api
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-hocus
              
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-async-worker"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-bind-service"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-file-service"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-mail-reader"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-mail-sender"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-notification-service"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-preview-generator"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-schedule-to-today"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-web-api"
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-hocus"
              
              kubectl -n {{ $.Release.Namespace }} scale --replicas=0 deployment.apps/pyrus-identity-server || echo
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app=pyrus-identity-server" || echo

{{-       if $needNatsUpgrade }}
              kubectl -n {{ $.Release.Namespace }} delete statefulset pyrus-datacenter-nats || echo
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app.kubernetes.io/name=nats" || echo
{{-       end }}

{{-       if $needPostgresUpgrade }}
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app.kubernetes.io/name=pyrus-logs-pgsql" || echo
              kubectl -n {{ $.Release.Namespace }} delete statefulset pyrus-logs-pgsql || echo
{{-         if $mainDB }}
              kubectl -n {{ $.Release.Namespace }} delete statefulset pyrus-postgresql || echo
              kubectl -n {{ $.Release.Namespace }} wait --for=delete pod -l "app.kubernetes.io/name=pyrus-postgresql" || echo
{{-         end }}
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}
